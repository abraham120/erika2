/* ###*B*###
 * ERIKA Enterprise - a tiny RTOS for small microcontrollers
 *
 * Copyright (C) 2002-2008  Evidence Srl
 *
 * This file is part of ERIKA Enterprise.
 *
 * ERIKA Enterprise is free software; you can redistribute it
 * and/or modify it under the terms of the GNU General Public License
 * version 2 as published by the Free Software Foundation, 
 * (with a special exception described below).
 *
 * Linking this code statically or dynamically with other modules is
 * making a combined work based on this code.  Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * As a special exception, the copyright holders of this library give you
 * permission to link this code with independent modules to produce an
 * executable, regardless of the license terms of these independent
 * modules, and to copy and distribute the resulting executable under
 * terms of your choice, provided that you also meet, for each linked
 * independent module, the terms and conditions of the license of that
 * module.  An independent module is a module which is not derived from
 * or based on this library.  If you modify this code, you may extend
 * this exception to your version of the code, but you are not
 * obligated to do so.  If you do not wish to do so, delete this
 * exception statement from your version.
 *
 * ERIKA Enterprise is distributed in the hope that it will be
 * useful, but WITHOUT ANY WARRANTY; without even the implied warranty
 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License version 2 for more details.
 *
 * You should have received a copy of the GNU General Public License
 * version 2 along with ERIKA Enterprise; if not, write to the
 * Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
 * Boston, MA 02110-1301 USA.
 * ###*E*### */

/*
 * Author: 2001,2002 Paolo Gai
 * CVS: $Id: ee_common.h,v 1.4 2008/07/15 13:22:09 pj Exp $
 */

#ifndef __INCLUDE_EDF_COMMON_H__
#define __INCLUDE_EDF_COMMON_H__


/*************************************************************************
 Kernel Constants
 *************************************************************************/

/* invalid TID */
#define EE_NIL       ((EE_TID)-1)

/* Task statuses */
#if defined(__MULTI__) || defined(__WITH_STATUS__)
/* This is needed for initialization purposes 
   in the source code generated by RT-Druid */
#define EE_READY      1
#endif

/*************************************************************************
 Kernel Types
 *************************************************************************/

/* priority type */
#ifndef EE_TYPEPRIO
#define EE_TYPEPRIO EE_UREG
#endif

/* status type */
#ifndef EE_TYPESTATUS
#define EE_TYPESTATUS EE_UREG
#endif

/* pending activation type */
#ifndef EE_TYPENACT
#define EE_TYPENACT EE_UREG
#endif

/* Maximum number of pending activations */
#ifndef EE_MAX_NACT
#define EE_MAX_NACT  ((EE_UREG)-1)
#endif

/* Resource ID type */
#ifndef EE_TYPERESOURCE
#define EE_TYPERESOURCE EE_UREG
#endif

/* relative deadline type */
#ifndef EE_TYPERELDLINE
#define EE_TYPERELDLINE EE_TIME
#endif

/* absolute deadline type */
#ifndef EE_TYPEABSDLINE
#define EE_TYPEABSDLINE EE_TIME
#endif


/*************************************************************************
 Kernel Variables
 *************************************************************************/

//ROM
extern const EE_TYPEPRIO     EE_th_ready_prio[];     /* task preemption level */
extern const EE_TYPEPRIO     EE_th_dispatch_prio[];  /* task threshold */
#ifndef __EDF_NO_RESOURCE__
extern const EE_TYPEPRIO     EE_resource_ceiling[];     /* resource ceiling */
#endif

// RAM 
extern EE_TYPESTATUS   EE_th_status[];	/* task status */
extern EE_TYPENACT     EE_th_nact[];	/* pending activations */
extern EE_TID          EE_th_next[];	/* next task in queue */

extern EE_TYPEPRIO     EE_sys_ceiling;	/* system ceiling */
#ifndef __EDF_NO_RESOURCE__
extern EE_TYPEPRIO     EE_resource_oldceiling[];	 /* old resource ceiling */
#endif

/* The first task into the ready queue */
extern EE_TID EE_rqfirst;

/* The first stacked task */
extern EE_TID EE_stkfirst;

#ifdef __REL_DEADLINES_IN_RAM__
extern EE_TYPERELDLINE EE_th_reldline[];	/* task relative deadline */
#else
extern const EE_TYPERELDLINE EE_th_reldline[];	/* task relative deadline */
#endif

extern EE_TYPEABSDLINE EE_th_absdline[];	/* task absolute deadline */
#endif


