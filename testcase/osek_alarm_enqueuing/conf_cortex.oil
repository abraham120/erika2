/* ###*B*###
 * ERIKA Enterprise - a tiny RTOS for small microcontrollers
 *
 * Copyright (C) 2002-2011  Evidence Srl
 *
 * This file is part of ERIKA Enterprise.
 *
 * ERIKA Enterprise is free software; you can redistribute it
 * and/or modify it under the terms of the GNU General Public License
 * version 2 as published by the Free Software Foundation,
 * (with a special exception described below).
 *
 * Linking this code statically or dynamically with other modules is
 * making a combined work based on this code.  Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * As a special exception, the copyright holders of this library give you
 * permission to link this code with independent modules to produce an
 * executable, regardless of the license terms of these independent
 * modules, and to copy and distribute the resulting executable under
 * terms of your choice, provided that you also meet, for each linked
 * independent module, the terms and conditions of the license of that
 * module.  An independent module is a module which is not derived from
 * or based on this library.  If you modify this code, you may extend
 * this exception to your version of the code, but you are not
 * obligated to do so.  If you do not wish to do so, delete this
 * exception statement from your version.
 *
 * ERIKA Enterprise is distributed in the hope that it will be
 * useful, but WITHOUT ANY WARRANTY; without even the implied warranty
 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License version 2 for more details.
 *
 * You should have received a copy of the GNU General Public License
 * version 2 along with ERIKA Enterprise; if not, write to the
 * Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
 * Boston, MA 02110-1301 USA.
 * ###*E*### */

CPU test_application {

  OS EE {
    EE_OPT = "__ASSERT__";
    EE_OPT = "DEBUG";

    STATUS = STANDARD;

    STARTUPHOOK = FALSE;
    ERRORHOOK = FALSE;
    SHUTDOWNHOOK = FALSE;
    PRETASKHOOK = FALSE;
    POSTTASKHOOK = FALSE;

    USEGETSERVICEID = FALSE;
    USEPARAMETERACCESS = FALSE;
    USERESSCHEDULER = FALSE;

    CPU_DATA = CORTEX_MX {
      MODEL = M4;
      COMPILER_TYPE = KEIL;
      APP_SRC = "code.c";
      MULTI_STACK = FALSE;
    };

    MCU_DATA = STELLARIS {
      MODEL = LM4F232xxxx;
    };

    
    EE_OPT = "__OO_STARTOS_OLD__";

    KERNEL_TYPE = BCC1;
  };


  TASK TestTask {
    PRIORITY = 0x01;
    ACTIVATION = 1;
    SCHEDULE = NON;
    AUTOSTART = TRUE;
    STACK = SHARED;
  };

  COUNTER Counter {
      MINCYCLE = 1;
      MAXALLOWEDVALUE = 16 ;
      TICKSPERBASE = 1;
  };

  ALARM Test1Alarm1 {
    COUNTER = Counter;
    ACTION = ALARMCALLBACK { 
      ALARMCALLBACKNAME = "test1_alarm1_callback";
    };
  };

  ALARM Test2Alarm1 {
    COUNTER = Counter;
    ACTION = ALARMCALLBACK { 
      ALARMCALLBACKNAME = "test2_alarm1_callback";
    };
  };

  ALARM Test2Alarm2 {
    COUNTER = Counter;
    ACTION = ALARMCALLBACK { 
      ALARMCALLBACKNAME = "test2_alarm2_callback";
    };
  };

  ALARM Test2Alarm3 {
    COUNTER = Counter;
    ACTION = ALARMCALLBACK { 
      ALARMCALLBACKNAME = "test2_alarm3_callback";
    };
  };
  
  ALARM Test3Alarm1 {
    COUNTER = Counter;
    ACTION = ALARMCALLBACK { 
      ALARMCALLBACKNAME = "test3_alarm1_callback";
    };
  };

  ALARM Test3Alarm2 {
    COUNTER = Counter;
    ACTION = ALARMCALLBACK { 
      ALARMCALLBACKNAME = "test3_alarm2_callback";
    };
  };

  ALARM Test3Alarm3 {
    COUNTER = Counter;
    ACTION = ALARMCALLBACK { 
      ALARMCALLBACKNAME = "test3_alarm3_callback";
    };
  };

  ALARM Test4Alarm1 {
    COUNTER = Counter;
    ACTION = ALARMCALLBACK {
      ALARMCALLBACKNAME = "test4_alarm1_callback";
    };
  };
};

