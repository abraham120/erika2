# Author: 2003- Paolo Gai
# CVS: $Id: makefile,v 1.16 2006/09/04 06:37:56 pj Exp $



# Global testcase makefile

# this force the user to define an ARCH environment 
# retaining the possibility to use the help tag ;-)

# DIR multiplexer

# PURPOSE OF THIS MAKEFILE
# this makefile simply call common/makefile.in recursively for each
# subdirectory that contains a conf.in file

include common/common.mk

ifndef ARCH
help::
endif

export NOPRINTDIR = --no-print-directory

ifndef DIRS
DIRS := $(dir $(wildcard */conf.in))
endif

# remove duplicates and add trailing / if missing
SDIRS = $(addsuffix /,$(subst /,,$(sort $(DIRS))))

.PHONY: help clean

#
# The sequence of compilation for each target is the following:
#
# 1) tmp: Tmp Directory
#    the TMp directory is generated
#
# 2) conf: From the OIL files to the generation of a distribution
#    - For each demo,
#      - Generation of a parsed ee.oil file from appl.oil
#      - Generation of the ANT XML Files that is used to generate the
#        distribution configuration
#    - Generation of a -global- binary distributions with all the signatures
#    - If the source code generated by RT-Druid is not checked against
#      the signatures, then this can be the point of generation of the
#      source code
#
# 3) dist: Generation of the per-testcase distributions. 
#    Eventual source or binary distributions are created for each testcase
#
# 4) rtdruid: Generation of the source code from the OIL Files
#    - Generation of the ANT files for the generation of the source code with signature check
#    - production of the source code
#
# 5) all: Compilation of the testcases

#
# Compiling the targets
#
.PHONY: all
all_dirs := $(addprefix all_, $(SDIRS))
all: $(all_dirs)
# create the compile_all.log
	@for x in `find . -iname compile.log`; do echo ----- >>tmp/compile_all.log; echo $${x} >>tmp/compile_all.log; cat $${x} >>tmp/compile_all.log; done
# print the errors.log
	@if test -e tmp/errors.log; then \
		echo ERRORS				;\
		echo ---------------------------------	;\
		cat tmp/errors.log			;\
		echo ---------------------------------	;\
		echo Use this command to redo the erroneous testcases ;\
		echo make ARCH=$(ARCH) DIRS=\"\\        ;\
		awk '{ print $$2, "\\" }' tmp/errors.log;\
		echo \"                                 ;\
		echo ---------------------------------	;\
	else						\
		echo ALL ended successfully!		;\
	fi

#
# Ensure that confparser is compiled before everything else
#
.PHONY: compile_confparser
compile_confparser :
	+@$(MAKE) -C common/confparser

-include compile_confparser



define all_template
.PHONY: all_$(1)
all_$(1): rtdruid
	+@$$(MAKE) $$(NOPRINTDIR) -C common -f arch_multiplexer.mk EXPERIMENT=$(1) all

endef
$(foreach d,$(SDIRS),$(eval $(call all_template,$(d))))



#
# Generating the RTDRUID files
#
.PHONY: rtdruid
rtdruid_dirs := $(addprefix rtdruid_, $(SDIRS))
rtdruid: $(rtdruid_dirs)
	@echo RTDRUID \(global\) started successfully!
	@$(GLOBAL_RTDRUID)
	@echo RTDRUID \(global\) ended successfully!

define rtdruid_template
.PHONY: rtdruid_$(1)
rtdruid_$(1): dist
	+@$$(MAKE) $$(NOPRINTDIR) -C common -f arch_multiplexer.mk EXPERIMENT=$(1) rtdruid

endef
$(foreach d,$(SDIRS),$(eval $(call rtdruid_template,$(d))))




#
# Generating the DIST files
#
.PHONY: dist
dist_dirs := $(addprefix dist_, $(SDIRS))
dist: $(dist_dirs)
	@echo DIST ended successfully!

define dist_template
.PHONY: dist_$(1)
dist_$(1): conf
	+@$$(MAKE) $$(NOPRINTDIR) -C common -f arch_multiplexer.mk EXPERIMENT=$(1) dist

endef
$(foreach d,$(SDIRS),$(eval $(call dist_template,$(d))))



#
# Generating the ANT files
#
.PHONY: conf
conf_dirs := $(addprefix conf_, $(SDIRS))
conf: $(conf_dirs)
	@echo CONF \(global\) started successfully!
	@$(GLOBAL_CONF)
	@echo CONF \(global\) ended successfully!

define conf_template
.PHONY: conf_$(1)
conf_$(1): tmp
	+@$$(MAKE) $$(NOPRINTDIR) -C common -f arch_multiplexer.mk EXPERIMENT=$(1) conf

endef
$(foreach d,$(SDIRS),$(eval $(call conf_template,$(d))))



#
# Generating the TMP dir
#
.PHONY: tmp
tmp:
	@echo RM tmp directory
	@rm -rf tmp
	@mkdir -p tmp








clean:
	rm -rf `ls -d */out*` tmp
	$(MAKE) -C common/confparser $@
	rm -rf common/confparser/*.lock

ifdef ARCH
supported:
	@for x in $(wildcard */conf.in); do grep $(ARCH) $${x} | xargs echo $${x} ------; done
else
supported:
	@echo Please specify a value for ARCH
	@echo Example:
	@echo
	@echo make supported ARCH=pic30
endif

include $(wildcard common/*/test.mk)
help::
	@cat readme
	@$(foreach t, $(TESTLIST), echo make ARCH=$(t);)

# If the architecture is not in the list and the goal is not equal to "supported"
ifneq ($(and $(filter-out $(TESTLIST),$(ARCH)),$(filter-out $(MAKECMDGOALS),supported)),)
$(error Unknow architecture $(ARCH))
endif

# This target replaces inlcude "test/assert/inc/ee_assert.h" with include "ee_assert.h"
.PHONY: flat_assert
flat_assert:
	@find . -iname "code.c" -type f | while read  file; do \
	echo "$${file}"; sed -i.bak -e "s-\#include\s*\"test/assert/inc/ee_assert.h\"-\#include \"ee_assert.h\"-" "$${file}"  ; rm "$${file}.bak" ; \
	done
	@sed -i.bak -e "s-\#include\s*\"cpu/e200zx/inc/ee_mcu_regs.h\"-\#include \"ee_mcu_regs.h\"-" "common/e200zx/test_irq.c"  ; rm "common/e200zx/test_irq.c.bak"
