CPU test_application {

  OS EE {
    EE_OPT = "EE_DEBUG";
    EE_OPT = "__ASSERT__";
    //EE_OPT = "EE_EXECUTE_FROM_RAM"; It doesn't fit for 40 bytes
    EE_OPT = "EE_SAVE_TEMP_FILES";
    //EE_OPT = "EE_MM_OPT";
    EE_OPT = "EE_ICACHE_ENABLED";
    EE_OPT = "EE_DCACHE_ENABLED";

    EE_OPT = "EE_BUILD_SINGLE_ELF";

    /* La seguente diventer√† opzione un campo dell'OIL */
    //EE_OPT = "EE_TIMING_PROTECTION__";

    MEMORY_PROTECTION   = TRUE;
    //SERVICE_PROTECTION  = TRUE;
    STACKMONITORING     = TRUE;
    REMOTENOTIFICATION  = USE_RPC;

    //SPINLOCKS = QUEUED;

    MASTER_CPU = "master";

    CPU_DATA = TRICORE {
      ID = "master";
      CPU_CLOCK = 200.0;
      APP_SRC = "master.c";
      MULTI_STACK = TRUE;
      SYS_STACK_SIZE = 4096;
      COMPILER_TYPE = GNU;
      //COMPILER_TYPE = TASKING;
    };

    CPU_DATA = TRICORE {
      ID = "slave1";
      APP_SRC = "slave1.c";
      MULTI_STACK = TRUE;
      SYS_STACK_SIZE = 4096;
      COMPILER_TYPE = GNU;
      //COMPILER_TYPE = TASKING;
    };

    CPU_DATA = TRICORE {
      ID = "slave2";
      APP_SRC = "slave2.c";
      MULTI_STACK = TRUE;
      SYS_STACK_SIZE = 4096;
      COMPILER_TYPE = GNU;
      //COMPILER_TYPE = TASKING;
    };

    MCU_DATA = TRICORE {
      MODEL = TC27x;
    };

    STATUS = EXTENDED;
    ERRORHOOK = TRUE;

    //ORTI_SECTIONS = ALL;

    KERNEL_TYPE = ECC1;
  };

  TASK TaskMaster {
    CPU_ID = "master";
    PRIORITY = 1;
    AUTOSTART = TRUE;
    STACK = PRIVATE {
      SYS_SIZE = 256;
    };
    ACTIVATION = 1;
    SCHEDULE = FULL;
    EVENT = EventMaster;
  };

  TASK TaskSlave1 {
    CPU_ID = "slave1";
    PRIORITY = 1;
    AUTOSTART = FALSE;
    STACK = PRIVATE {
      SYS_SIZE = 128;
    };
    ACTIVATION = 1;
    SCHEDULE = FULL;
    EVENT = EventSlave1;
    ACCESSING_APPLICATION = Core0App;
    ACCESSING_APPLICATION = Core2App;
  };

  TASK TaskSlave2 {
    CPU_ID = "slave2";
    PRIORITY = 1;
    AUTOSTART = FALSE;
    STACK = SHARED;
    ACTIVATION = 1;
    SCHEDULE = FULL;
    ACCESSING_APPLICATION = Core0App;
  };

  EVENT EventMaster { MASK = AUTO; };
  EVENT EventSlave1 { MASK = AUTO; };

  COUNTER CounterSlave2 {
    CPU_ID = "slave2";
    MINCYCLE = 1;
    MAXALLOWEDVALUE = 1;
    TICKSPERBASE = 1;
    ACCESSING_APPLICATION = Core0App;
  };

  ALARM AlarmSlave2 {
    COUNTER = CounterSlave2;
    ACTION = SETEVENT { TASK = TaskSlave1; EVENT = EventSlave1; };
    ACCESSING_APPLICATION = Core0App;
  };

  SCHEDULETABLE ScheduleTableSlave2 {
    CPU_ID  = "slave2";
    COUNTER = CounterSlave2;
    DURATION = 1;
    REPEATING = FALSE;
    AUTOSTART = FALSE;
    EXPIRE_POINT = ACTION {
      EXPIRE_VALUE = 1;
      ACTION = SETEVENT { TASK = TaskSlave1; EVENT = EventSlave1; };
      SYNC_ADJUSTMENT = FALSE;
    };
    LOCAL_TO_GLOBAL_TIME_SYNCHRONIZATION = FALSE; //EG @Nico: Che regola di syncronizzazione imponi nella ROM della schedule table in questo caso?
    ACCESSING_APPLICATION = Core0App;
  };

  APPLICATION Core0App {
    CPU_ID  = "master";
    TRUSTED = TRUE;
    TASK    = TaskMaster;
    MEMORY_SIZE = 0x1000;
    SHARED_STACK_SIZE = 256;
    IRQ_STACK_SIZE = 256;
  };

  APPLICATION Core1App {
    CPU_ID  = "slave1";
    TRUSTED = FALSE;
    TASK    = TaskSlave1;
    MEMORY_SIZE = 0x1000;
    SHARED_STACK_SIZE = 256;
    IRQ_STACK_SIZE = 256;
  };

  APPLICATION Core2App {
    CPU_ID  = "slave2";
    TRUSTED = FALSE;
    TASK    = TaskSlave2;
    COUNTER = CounterSlave2;
    ALARM   = AlarmSlave2;
    SCHEDULETABLE = ScheduleTableSlave2;
    MEMORY_SIZE = 0x1000;
    SHARED_STACK_SIZE = 256;
    IRQ_STACK_SIZE = 256;
  };
};
