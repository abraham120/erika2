/* ###*B*###
 * ERIKA Enterprise - a tiny RTOS for small microcontrollers
 *
 * Copyright (C) 2002-2013 Evidence Srl
 *
 * This file is part of ERIKA Enterprise.
 *
 * ERIKA Enterprise is free software; you can redistribute it
 * and/or modify it under the terms of the GNU General Public License
 * version 2 as published by the Free Software Foundation, 
 * (with a special exception described below).
 *
 * Linking this code statically or dynamically with other modules is
 * making a combined work based on this code.  Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * As a special exception, the copyright holders of this library give you
 * permission to link this code with independent modules to produce an
 * executable, regardless of the license terms of these independent
 * modules, and to copy and distribute the resulting executable under
 * terms of your choice, provided that you also meet, for each linked
 * independent module, the terms and conditions of the license of that
 * module.  An independent module is a module which is not derived from
 * or based on this library.  If you modify this code, you may extend
 * this exception to your version of the code, but you are not
 * obligated to do so.  If you do not wish to do so, delete this
 * exception statement from your version.
 *
 * ERIKA Enterprise is distributed in the hope that it will be
 * useful, but WITHOUT ANY WARRANTY; without even the implied warranty
 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License version 2 for more details.
 *
 * You should have received a copy of the GNU General Public License
 * version 2 along with ERIKA Enterprise; if not, write to the
 * Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
 * Boston, MA 02110-1301 USA.
 * ###*E*### */

CPU test_application {

  OS EE {
    EE_OPT = "EE_DEBUG";
    EE_OPT = "__ASSERT__";
    EE_OPT = "EE_EXECUTE_FROM_RAM";
    EE_OPT = "EE_SAVE_TEMP_FILES";
    //EE_OPT = "EE_ICACHE_ENABLED";
    //EE_OPT = "EE_DCACHE_ENABLED";

    //MEMORY_PROTECTION   = TRUE;
    //STACKMONITORING     = TRUE;
    //SERVICE_PROTECTION = TRUE;
    /* La seguente diventer√† opzione un campo dell'OIL */
    //EE_OPT = "EE_TIMING_PROTECTION__";

    CPU_DATA = TRICORE {
      CPU_CLOCK = 200.0;
      APP_SRC = "code.c";
      MULTI_STACK = TRUE;
      //SYS_STACK_SIZE = 4096;
      COMPILER_TYPE = GNU;
    };

    MCU_DATA = TRICORE {
      MODEL = TC27x;
    };

    BOARD_DATA = TRIBOARD_TC2X5;

    STATUS          = EXTENDED;
    USERESSCHEDULER = FALSE;
    ORTI_SECTIONS   = ALL;
    KERNEL_TYPE     = ECC1;
  };

  TASK Task1 {
    PRIORITY = 1;
    AUTOSTART = TRUE;
    STACK = PRIVATE {
      SYS_SIZE = 512;
    };
    ACTIVATION = 1;
    SCHEDULE = FULL;
    EVENT = TimerEvent;
    EVENT = ButtonEvent;
  };

  TASK Task2 {
    PRIORITY = 2;
    AUTOSTART = FALSE;
    STACK = SHARED;
    ACTIVATION = 1;
    SCHEDULE = FULL;
  };

  EVENT TimerEvent  { MASK = AUTO; };
  EVENT ButtonEvent  { MASK = AUTO; };

  COUNTER system_timer {
    MINCYCLE = 1;
    MAXALLOWEDVALUE = 2147483647;
    TICKSPERBASE = 1;
    TYPE = HARDWARE {
      DEVICE = "STM_SR0";
      SYSTEM_TIMER = TRUE;
      PRIORITY = 1;
    };
    SECONDSPERTICK = 0.001;
  };

  SCHEDULETABLE SchedTab1 {
    COUNTER = system_timer;
    DURATION = 400;
    REPEATING = FALSE;
    AUTOSTART = TRUE {
      TYPE = ABSOLUTE;
      START_VALUE = 0;
    };
    EXPIRE_POINT = ACTION {
      EXPIRE_VALUE = 100;
      ACTION = ACTIVATETASK { TASK = Task2; };
      ACTION = SETEVENT { TASK = Task1; EVENT = ButtonEvent; };
      SYNC_ADJUSTMENT = FALSE;
    };
    EXPIRE_POINT = ACTION {
      EXPIRE_VALUE = 300;
      ACTION = SETEVENT { TASK = Task1; EVENT = TimerEvent; };
      SYNC_ADJUSTMENT = FALSE;
    };
    LOCAL_TO_GLOBAL_TIME_SYNCHRONIZATION = FALSE;
  };

  SCHEDULETABLE SchedTab2 {
    COUNTER = system_timer;
    DURATION = 250;
    REPEATING = FALSE;
    AUTOSTART = FALSE;
    EXPIRE_POINT = ACTION {
      EXPIRE_VALUE = 50;
      ACTION = ACTIVATETASK { TASK = Task2; };
      SYNC_ADJUSTMENT = FALSE;
    };
    EXPIRE_POINT = ACTION {
      EXPIRE_VALUE = 200;
            ACTION = ACTIVATETASK { TASK = Task2; };
      SYNC_ADJUSTMENT = FALSE;
    };
    LOCAL_TO_GLOBAL_TIME_SYNCHRONIZATION = FALSE;
  };
};
