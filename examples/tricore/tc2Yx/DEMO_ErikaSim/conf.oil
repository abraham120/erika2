/* ###*B*###
 * ERIKA Enterprise - a tiny RTOS for small microcontrollers
 *
 * Copyright (C) 2002-2008  Evidence Srl
 *
 * This file is part of ERIKA Enterprise.
 *
 * ERIKA Enterprise is free software; you can redistribute it
 * and/or modify it under the terms of the GNU General Public License
 * version 2 as published by the Free Software Foundation, 
 * (with a special exception described below).
 *
 * Linking this code statically or dynamically with other modules is
 * making a combined work based on this code.  Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * As a special exception, the copyright holders of this library give you
 * permission to link this code with independent modules to produce an
 * executable, regardless of the license terms of these independent
 * modules, and to copy and distribute the resulting executable under
 * terms of your choice, provided that you also meet, for each linked
 * independent module, the terms and conditions of the license of that
 * module.  An independent module is a module which is not derived from
 * or based on this library.  If you modify this code, you may extend
 * this exception to your version of the code, but you are not
 * obligated to do so.  If you do not wish to do so, delete this
 * exception statement from your version.
 *
 * ERIKA Enterprise is distributed in the hope that it will be
 * useful, but WITHOUT ANY WARRANTY; without even the implied warranty
 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License version 2 for more details.
 *
 * You should have received a copy of the GNU General Public License
 * version 2 along with ERIKA Enterprise; if not, write to the
 * Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
 * Boston, MA 02110-1301 USA.
 * ###*E*### */

CPU test_application {

  OS EE {
    EE_OPT = "EE_DEBUG";
    //EE_OPT = "__USE_LEDS__";
    //EE_OPT = "__USE_BUTTONS__";
    EE_OPT = "EE_EXECUTE_FROM_RAM";
    //EE_OPT = "__CODEWARRIOR__";
    //EE_OPT = "EE_ISR_DYNAMIC_TABLE";

    //CFLAGS = "";
    //ASFLAGS = "";
    //LDFLAGS = "";

    CPU_DATA = TRICORE {
      CPU_CLOCK = 200.0;
      MULTI_STACK = TRUE {
        IRQ_STACK = TRUE {
          SYS_SIZE = 512;
        };
      };
      COMPILER_TYPE = GNU;
      APP_SRC = "code.c";
    };

    MCU_DATA = TRICORE {
      MODEL = TC27x;
    };

    BOARD_DATA = TRIBOARD_TC2X5;

    STATUS = EXTENDED;
    USERESSCHEDULER = FALSE;

    /* Setup Kernel Type */
    KERNEL_TYPE = ECC1;

    /* Enable ORTI support for Lauterbach Tracer */
    ORTI_SECTIONS = ALL;
    };

  /* this is the OIL part for the task displaying the christmas tree */
    TASK Task1 {
      PRIORITY = 0x08;   /* Low priority EG: This comment is false! */
      SCHEDULE = FULL;
      AUTOSTART = FALSE;
      STACK = PRIVATE {
        SYS_SIZE = 512;
      };
      ACTIVATION = 1;    /* only one pending activation */
  };  
  
  /* this is the OIL part for the task activated by the button press */
  TASK Task2 {
      PRIORITY = 0x06;   /* High priority */
      SCHEDULE = FULL;
      AUTOSTART = TRUE; 
      STACK = PRIVATE {
        SYS_SIZE = 512;
      };
      ACTIVATION = 1;
    };

  /* Tasks sharing a resource */
  TASK Task3 {
    PRIORITY = 0x01;
    SCHEDULE = FULL;
    AUTOSTART = FALSE;
    STACK = PRIVATE {
      SYS_SIZE = 512;
    };
    ACTIVATION = 1;
    RESOURCE = Resource;
    RESOURCE = Resource2;
    RESOURCE = Resource3;
    };

  TASK Task4 {
    PRIORITY = 0x02;
    SCHEDULE = FULL;
    AUTOSTART = FALSE;
    STACK = PRIVATE {
      SYS_SIZE = 512;
    };
    ACTIVATION = 1;
    RESOURCE = Resource;
    RESOURCE = Resource3;
    };

  TASK Task5 {
    PRIORITY = 0x03;
    SCHEDULE = FULL;
    AUTOSTART = FALSE;
    STACK = PRIVATE {
      SYS_SIZE = 512;
    };
    ACTIVATION = 1;
    RESOURCE = Resource;
    };

  /* Tasks used to trigger Events */
  TASK Task6 {
    PRIORITY = 0x04;
    ACTIVATION = 1;
    SCHEDULE = FULL;
    AUTOSTART = TRUE;
    STACK = PRIVATE {
      SYS_SIZE = 512;
    };
    EVENT = TimerEvent;
    RESOURCE = Resource2;
    };

    TASK Task7 {
    PRIORITY = 0x05;
    ACTIVATION = 1;
    SCHEDULE = FULL;
    AUTOSTART = FALSE;
    STACK = PRIVATE {
      SYS_SIZE = 512;
    };
    RESOURCE = Resource3;
    };

    EVENT TimerEvent  { MASK = AUTO; };

    COUNTER Counter1 {
        MINCYCLE = 2; /* EG: Why Min Cycle 2 ? */
        MAXALLOWEDVALUE = 0xFFFF ;
        TICKSPERBASE = 1;
    };

    ALARM AlarmTask1 {
      COUNTER = Counter1;
      ACTION = SETEVENT { TASK = Task6; EVENT = TimerEvent; };
      AUTOSTART = TRUE { ALARMTIME = 250; CYCLETIME = 500; };
    };

    ALARM AlarmTask2 {
      COUNTER = Counter1;
      ACTION = ACTIVATETASK { TASK = Task7; };
      AUTOSTART = FALSE;
    };

  /* This resource is shared among Task3, Task4 and Task5 */
  RESOURCE Resource {
    RESOURCEPROPERTY = STANDARD;
  };

  /* This resource is shared among Task3, Task6 */
  RESOURCE Resource2 {
    RESOURCEPROPERTY = STANDARD;
  };

  /* This resource is shared among Task3, Task4 and Task7 */
  RESOURCE Resource3 {
    RESOURCEPROPERTY = STANDARD;
  };

  /* EG: ISR2 have to be defined statically in OIL file */

  ISR Counter_Interrupt {
    CATEGORY = 2;
    PRIORITY = 1;
  };

  ISR Buttons_Interrupt {
    CATEGORY = 2;
    PRIORITY = 2;
  };
};
