/* In this example I will provide custom startup code and scripts to execute
   from RAM */

CPU test_application {

  OS EE {
    EE_OPT = "EE_DEBUG";
    EE_OPT = "__ASSERT__";
    /* This is not optional in this project, because custom linker script
       provided are tought to locate code in RAM so I need T32 scrips for RAM */
    EE_OPT = "EE_EXECUTE_FROM_RAM";
    //EE_OPT = "EE_SAVE_TEMP_FILES";
    //EE_OPT = "EE_MM_OPT";

    /* I turn off Erika trap handling support */
    EE_OPT = "EE_ERIKA_TRAP_HANDLING_OFF";
    /* but I maintain ISR support to keep things easy
       I put how you could disable the faeture commented here just as
       reference */
    /* EE_OPT = "EE_ERIKA_ISR_HANDLING_OFF"; */

    CUSTOM_STARTUP_CODE = TRUE;

    REMOTENOTIFICATION = USE_RPC;

    //SPINLOCKS = QUEUED;

    MASTER_CPU = "master";

    CPU_DATA = TRICORE {
      ID = "master";
      CPU_CLOCK = 200.0;
      APP_SRC = "custom_cstart.c";
      APP_SRC = "master.c";
      MULTI_STACK = TRUE;
      SYS_STACK_SIZE = 4096;
      COMPILER_TYPE = GNU;
      LINKERSCRIPT = "custom_core0.ld";
    };

    CPU_DATA = TRICORE {
      ID = "slave1";
      APP_SRC = "custom_cstart.c";
      APP_SRC = "slave1.c";
      MULTI_STACK = TRUE;
      SYS_STACK_SIZE = 4096;
      COMPILER_TYPE = GNU;
      LINKERSCRIPT = "custom_core1.ld";
      /* You could use a global function symbol */
      STARTUP_ADDRESS = 0x60102000;
    };

    CPU_DATA = TRICORE {
      ID = "slave2";
      APP_SRC = "custom_cstart.c";
      APP_SRC = "slave2.c";
      MULTI_STACK = TRUE;
      SYS_STACK_SIZE = 4096;
      COMPILER_TYPE = GNU;
      LINKERSCRIPT = "custom_core2.ld";
      /* You could use a global function symbol */
      STARTUP_ADDRESS = 0x50102000;
    };

    MCU_DATA = TRICORE {
      MODEL = TC27x;
    };

    STATUS = STANDARD;
    KERNEL_TYPE = BCC1;
  };

  TASK TaskMaster {
    CPU_ID = "master";
    PRIORITY = 1;
    AUTOSTART = TRUE;
    STACK = SHARED;
    ACTIVATION = 1;
    SCHEDULE = FULL;
  };

  TASK TaskSlave1 {
    CPU_ID = "slave1";
    PRIORITY = 1;
    AUTOSTART = FALSE;
    STACK = SHARED;
    ACTIVATION = 1;
    SCHEDULE = FULL;
  };

  TASK TaskSlave2 {
    CPU_ID = "slave2";
    PRIORITY = 1;
    AUTOSTART = FALSE;
    STACK = SHARED;
    ACTIVATION = 1;
    SCHEDULE = FULL;
  };
};
