/* ###*B*###
 * ERIKA Enterprise - a tiny RTOS for small microcontrollers
 *
 * Copyright (C) 2002-2011  Evidence Srl
 *
 * This file is part of ERIKA Enterprise.
 *
 * ERIKA Enterprise is free software; you can redistribute it
 * and/or modify it under the terms of the GNU General Public License
 * version 2 as published by the Free Software Foundation, 
 * (with a special exception described below).
 *
 * Linking this code statically or dynamically with other modules is
 * making a combined work based on this code.  Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * As a special exception, the copyright holders of this library give you
 * permission to link this code with independent modules to produce an
 * executable, regardless of the license terms of these independent
 * modules, and to copy and distribute the resulting executable under
 * terms of your choice, provided that you also meet, for each linked
 * independent module, the terms and conditions of the license of that
 * module.  An independent module is a module which is not derived from
 * or based on this library.  If you modify this code, you may extend
 * this exception to your version of the code, but you are not
 * obligated to do so.  If you do not wish to do so, delete this
 * exception statement from your version.
 *
 * ERIKA Enterprise is distributed in the hope that it will be
 * useful, but WITHOUT ANY WARRANTY; without even the implied warranty
 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License version 2 for more details.
 *
 * You should have received a copy of the GNU General Public License
 * version 2 along with ERIKA Enterprise; if not, write to the
 * Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
 * Boston, MA 02110-1301 USA.
 * ###*E*### */

/*
 * A minimal EE demo that demonstrates how to work with the MULTISTACK mode with
 * nested interrupts.
 * In this demo two tasks are activated inside two ISRs and work with different
 * stacks.
 * With this demo you can test the ISR nesting mechanism with stack change. 
 * Author: 2012 Carlo Caione
 * Based on examples/s12xs/porting_examples/multistack/EEtest3
 */

CPU mySystem {

	OS myOs {

		EE_OPT = "DEBUG";
		EE_OPT = "__ASSERT__";

		CPU_DATA = CORTEX_MX {
			MODEL = M4;
			APP_SRC = "code.c";
			COMPILER_TYPE = KEIL;
			MULTI_STACK = TRUE;
		};

		EE_OPT = "__USE_SYSTICK__";

		MCU_DATA = STM32 {
			MODEL = STM32F4xx;
		};

		EE_OPT = "__SIMUL__";

		/* EE_OPT = "__USE_STM32F4XX_CMSIS__"; */
		/* EE_OPT = "__USE_STM32F4XX_SPD__"; */
		/* EE_OPT = "__USE_STM32F4XX_EVAL__"; */

		/* Uncomment the following EE_OPT to include all library functions */
		/* EE_OPT = "__USE_SPD_ALL__"; */
		/* EE_OPT = "__USE_SPD_TIM__"; */

		/* EE_OPT = "__ADD_LIBS__"; */
		/* LIB = ENABLE { NAME = "CMSIS"; }; */
		/* LIB = ENABLE { NAME = "SPD"; }; */
		/* LIB = ENABLE { NAME = "EVAL"; }; */

		STATUS = EXTENDED;
		STARTUPHOOK = FALSE;
		ERRORHOOK = FALSE;
		SHUTDOWNHOOK = FALSE;
		PRETASKHOOK = FALSE;
		POSTTASKHOOK = FALSE;
		USEGETSERVICEID = FALSE;
		USEPARAMETERACCESS = FALSE;
		USERESSCHEDULER = FALSE;

		KERNEL_TYPE = FP {
			NESTED_IRQ = TRUE;
		};

	};

	TASK Task1 {
		PRIORITY = 0x01;   /* Low priority */
		AUTOSTART = FALSE;
		STACK = PRIVATE {
			SYS_SIZE = 512;
		};
		ACTIVATION = 1;    /* only one pending activation */
		SCHEDULE = FULL;
	};

	TASK Task2 {
		PRIORITY = 0x02;   /* High priority */
		AUTOSTART = FALSE;
		STACK = PRIVATE {
			SYS_SIZE = 512;
		};
		ACTIVATION = 1;    /* only one pending activation */
		SCHEDULE = FULL;
	};

	ISR systick_handler {
		CATEGORY = 2;
		ENTRY = "SYSTICK";
		PRIORITY = 2;
	};

	ISR timer_handler {
		CATEGORY = 2;
		ENTRY = "TIM3";
		PRIORITY = 1;
	};

};
