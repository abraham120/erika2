/* ###*B*###
 * ERIKA Enterprise - a tiny RTOS for small microcontrollers
 *
 * Copyright (C) 2002-2012  Evidence Srl
 *
 * This file is part of ERIKA Enterprise.
 *
 * ERIKA Enterprise is free software; you can redistribute it
 * and/or modify it under the terms of the GNU General Public License
 * version 2 as published by the Free Software Foundation, 
 * (with a special exception described below).
 *
 * Linking this code statically or dynamically with other modules is
 * making a combined work based on this code.  Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * As a special exception, the copyright holders of this library give you
 * permission to link this code with independent modules to produce an
 * executable, regardless of the license terms of these independent
 * modules, and to copy and distribute the resulting executable under
 * terms of your choice, provided that you also meet, for each linked
 * independent module, the terms and conditions of the license of that
 * module.  An independent module is a module which is not derived from
 * or based on this library.  If you modify this code, you may extend
 * this exception to your version of the code, but you are not
 * obligated to do so.  If you do not wish to do so, delete this
 * exception statement from your version.
 *
 * ERIKA Enterprise is distributed in the hope that it will be
 * useful, but WITHOUT ANY WARRANTY; without even the implied warranty
 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License version 2 for more details.
 *
 * You should have received a copy of the GNU General Public License
 * version 2 along with ERIKA Enterprise; if not, write to the
 * Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
 * Boston, MA 02110-1301 USA.
 * ###*E*### */
 
 /** @file	conf.oil
  *  @author	Errico Guidieri
  *  @author	Giuseppe Serano
  *  @date	2012
  */

CPU test_application {

#include "conf_console.oil"
#include "conf_enc28j60.oil"

  OS EE {

    EE_OPT = "DEBUG";

    CPU_DATA = CORTEX_MX {
      MODEL = M4;
      /* Needed by system timer */
      CPU_CLOCK = 50.0;
      COMPILER_TYPE = KEIL;
      /* COMPILER_TYPE = CCS; */
      APP_SRC = "test1_main.c";
      APP_SRC = "Dio_Cfg.c";
      APP_SRC = "Dma_Cfg.c";
      APP_SRC = "Mcu_Cfg.c";
      APP_SRC = "Port_Cfg.c";
      APP_SRC = "Spi_Cfg.c";
      APP_SRC = "Sci_Cfg.c";
      /* APP_SRC = "Icu_Cfg.c"; */
      MULTI_STACK = FALSE;
    };

    MCU_DATA = STELLARIS {
      MODEL = LM4F232xxxx;
    };

    /* For System Timer and Timer Debug */
    EE_OPT = "__USE_SYSTICK__";

    EE_OPT = "__AUTOSAR_R4_0__";
    EE_OPT = "__AS_DIO_DRIVER__";
    EE_OPT = "__AS_MCU_DRIVER__";
    EE_OPT = "__AS_PORT_DRIVER__";
    EE_OPT = "__AS_SCI_DRIVER__";

    /* Needed by ENC28J60 IRQ */
    /* EE_OPT = "__AS_ICU_DRIVER__"; */
    /* EE_OPT = "__AS_CFG_ICU_EDGE_DETECT_API__"; */
    /* EE_OPT = "__AS_CFG_ICU_ENC28J60__"; */

    EE_OPT = "__AS_DMA_DRIVER__";
    EE_OPT = "__AS_CFG_DMA_STATUS_API__";
    EE_OPT = "__AS_CFG_DMA_CHANNEL_RESULT_API__";
    EE_OPT = "__AS_CFG_DMA_SCATTER_GATHER_API__";
    EE_OPT = "__AS_CFG_DMA_NOTIFICATIONS_API__";
    EE_OPT = "__AS_CFG_DMA_DISABLE_CHANNEL_API__";
    EE_OPT = "__AS_CFG_DMA_SPI__";
    EE_OPT = "__AS_CFG_DMA_XFER_ERR_NOTIF_SPI_1_RX__";
    EE_OPT = "__AS_CFG_DMA_XFER_ERR_NOTIF_SPI_1_TX__";

    EE_OPT = "__AS_SPI_DRIVER__";
    EE_OPT = "__AS_CFG_SPI_ENC28J60__";
    EE_OPT = "__AS_CFG_SPI_SYNCHRONOUS__";

    /* Kernel algorithm */
    KERNEL_TYPE = BCC1;

    /* ********************************************************** */
    /*                Contrib Library Inclusion                   */
    /* ********************************************************** */
    EE_OPT = "__ADD_LIBS__";

    /* Used to build separate libas.a without configuration */
    LIB = ENABLE { NAME = "AUTOSAR"; };
    /* Used to build separate libasssg.a without configuration */
    /* LIB = ENABLE { NAME = "AUTOSAR_SSG"; }; */

  };

  /* ****************************************************************** */
  /*                          Application                               */
  /* ****************************************************************** */
  COUNTER system_timer {
    MINCYCLE = 1;
    MAXALLOWEDVALUE = 2147483647;
    TICKSPERBASE = 1;
    TYPE = HARDWARE {
      DEVICE = "SYSTICK";
      SYSTEM_TIMER = TRUE;
    };
    SECONDSPERTICK = 0.001;
  };

  /* TASKs list */
  TASK myTask1 {
    PRIORITY = 2;
    STACK = SHARED;
    SCHEDULE = FULL;
  };

  /* ALARMs list */
  ALARM myAlarm1 {
    COUNTER = system_timer;
    ACTION = ACTIVATETASK { TASK = myTask1; };
    AUTOSTART = TRUE {
      ALARMTIME = 1000;
      CYCLETIME = 1000;
    };
  };

};
