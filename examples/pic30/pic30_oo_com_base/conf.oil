/* ###*B*###
 * ERIKA Enterprise - a tiny RTOS for small microcontrollers
 *
 * Copyright (C) 2002-2012  Evidence Srl
 *
 * This file is part of ERIKA Enterprise.
 *
 * ERIKA Enterprise is free software; you can redistribute it
 * and/or modify it under the terms of the GNU General Public License
 * version 2 as published by the Free Software Foundation, 
 * (with a special exception described below).
 *
 * Linking this code statically or dynamically with other modules is
 * making a combined work based on this code.  Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * As a special exception, the copyright holders of this library give you
 * permission to link this code with independent modules to produce an
 * executable, regardless of the license terms of these independent
 * modules, and to copy and distribute the resulting executable under
 * terms of your choice, provided that you also meet, for each linked
 * independent module, the terms and conditions of the license of that
 * module.  An independent module is a module which is not derived from
 * or based on this library.  If you modify this code, you may extend
 * this exception to your version of the code, but you are not
 * obligated to do so.  If you do not wish to do so, delete this
 * exception statement from your version.
 *
 * ERIKA Enterprise is distributed in the hope that it will be
 * useful, but WITHOUT ANY WARRANTY; without even the implied warranty
 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License version 2 for more details.
 *
 * You should have received a copy of the GNU General Public License
 * version 2 along with ERIKA Enterprise; if not, write to the
 * Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
 * Boston, MA 02110-1301 USA.
 * ###*E*### */

CPU test_application {

	OS EE {
		EE_OPT = "DEBUG";

		EE_OPT = "__OO_STARTOS_OLD__";
		
		CPU_DATA = PIC30 {
			APP_SRC = "code.c";
			MULTI_STACK = FALSE;
			ICD2 = TRUE;
		};

		MCU_DATA = PIC30 {
			MODEL = PIC33FJ256MC710;
		};

				
		STATUS = EXTENDED;
		STARTUPHOOK = FALSE;
		ERRORHOOK = FALSE;
		SHUTDOWNHOOK = FALSE;
		PRETASKHOOK = FALSE;
		POSTTASKHOOK = FALSE;
		USEGETSERVICEID = FALSE;
		USEPARAMETERACCESS = FALSE;
		USERESSCHEDULER = FALSE;
		
		KERNEL_TYPE = BCC1;
		
		
//		ORTI_SECTIONS = ALL;

		BOARD_DATA = EE_FLEX {
			TYPE = DEMO {
				OPTIONS = ALL;
			};
		};
		EE_OPT = "__ADD_LIBS__";
		LIB = ENABLE {
			NAME = "CONSOLE";
		};	
		EE_OPT = "USE_CONSOLE";
		EE_OPT = "USE_CONSOLE_SERIAL";
		EE_OPT = "__USE_UART__";
		
    };
	
	COM EE_Com {
		COMERRORHOOK = FALSE;
		COMUSEGETSERVICEID = FALSE;
		COMUSEPARAMETERACCESS = FALSE;
		COMAPPMODE = "LED_DEMO_APPMODE";
		COMSTATUS  = COMSTANDARD;
		COMSTARTCOMEXTENSION = TRUE;
		COMTYPE = CCCB;
		INCLUDES = "umsgtype.h";
	};
   
	/* this is the OIL part for the task sending leds status*/
    TASK Task1 {
		PRIORITY = 0x02;
		SCHEDULE = FULL; 
		AUTOSTART = FALSE;
		STACK = SHARED;
		ACTIVATION = 4;    /* maximum four pending activations */
		MESSAGE = Led_SMsg;
	};	
	
	/* this is the OIL part for the task that receives and updates leds status */
    TASK Task2 {
		PRIORITY = 0x03;   
		SCHEDULE = FULL;
		AUTOSTART = FALSE;	
		STACK = SHARED;
		ACTIVATION = 1; 
		MESSAGE = Led_RMsg;
    };
	
	/* this is the OIL part for the task that prints the counters on the LCD 
	and the console (UART) */
    TASK Task3 {
		PRIORITY = 0x01;
		SCHEDULE = FULL;
		AUTOSTART = FALSE;	
		STACK = SHARED;
		ACTIVATION = 1;
		MESSAGE = Led_RMsg_Copy;
    };
	
	/* this is the OIL part for the task that initializes the COM support and 
	sets AlarmTask3 */
    TASK TaskInit {
		PRIORITY = 0x01;
		SCHEDULE = FULL;
		AUTOSTART = TRUE;	
		STACK = SHARED;
		ACTIVATION = 1; 
    };
	
    COUNTER myCounter {
        MINCYCLE = 2;
        MAXALLOWEDVALUE = 0xFFFF ;
        TICKSPERBASE = 1;
    };

	ALARM AlarmTask1 {
		COUNTER = myCounter;
		ACTION = ACTIVATETASK { TASK = Task1; };
	};
	ALARM AlarmTask3 {
		COUNTER = myCounter;
		ACTION = ACTIVATETASK { TASK = Task3; };
	};
	
	/* this is the message object used to transmit the leds status. */
	MESSAGE Led_SMsg {         /* Task1 sending this message */
		MESSAGEPROPERTY = SEND_STATIC_INTERNAL {
			CDATATYPE = "led_stat";
		};
	};
	
	/* this is the message object used to receive the leds status. */
	MESSAGE Led_RMsg {           /* Task2 receiving this message */
		MESSAGEPROPERTY = RECEIVE_UNQUEUED_INTERNAL {
			SENDINGMESSAGE = Led_SMsg;
		};
		NOTIFICATION =  ACTIVATETASK {
			TASK = Task2;
		};
	};
	
	/* this is the message object used to receive the leds status. */
	MESSAGE Led_RMsg_Copy {           /* Task4 receiving this message */
		MESSAGEPROPERTY = RECEIVE_QUEUED_INTERNAL {
			SENDINGMESSAGE = Led_SMsg;
			QUEUESIZE = 3;
		};
		NOTIFICATION =  NONE;
	};
	
};


