/* ###*B*###
 * ERIKA Enterprise - a tiny RTOS for small microcontrollers
 *
 * Copyright (C) 2002-2011  Evidence Srl
 *
 * This file is part of ERIKA Enterprise.
 *
 * ERIKA Enterprise is free software; you can redistribute it
 * and/or modify it under the terms of the GNU General Public License
 * version 2 as published by the Free Software Foundation, 
 * (with a special exception described below).
 *
 * Linking this code statically or dynamically with other modules is
 * making a combined work based on this code.  Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * As a special exception, the copyright holders of this library give you
 * permission to link this code with independent modules to produce an
 * executable, regardless of the license terms of these independent
 * modules, and to copy and distribute the resulting executable under
 * terms of your choice, provided that you also meet, for each linked
 * independent module, the terms and conditions of the license of that
 * module.  An independent module is a module which is not derived from
 * or based on this library.  If you modify this code, you may extend
 * this exception to your version of the code, but you are not
 * obligated to do so.  If you do not wish to do so, delete this
 * exception statement from your version.
 *
 * ERIKA Enterprise is distributed in the hope that it will be
 * useful, but WITHOUT ANY WARRANTY; without even the implied warranty
 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License version 2 for more details.
 *
 * You should have received a copy of the GNU General Public License
 * version 2 along with ERIKA Enterprise; if not, write to the
 * Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
 * Boston, MA 02110-1301 USA.
 * ###*E*### */

CPU mySystem {
    
    OS myOs {
        /* Kernel OSEK conformance class BCC1 */
        KERNEL_TYPE = BCC1;

        CPU_DATA = PIC30 {
            APP_SRC = "code.c";
            MULTI_STACK = FALSE;
            ICD2 = TRUE;
        };

        MCU_DATA = PIC30 {
            MODEL = PIC33FJ64MC802;
        };

        EE_OPT = "DEBUG";
        EE_OPT = "__EE_EASYLAB__";
        EE_OPT = "__USE_LEDS__";
        EE_OPT = "__USE_BUZZER__";
        EE_OPT = "__USE_TIMER__";
        EE_OPT = "__USE_PWM__";
        EE_OPT = "__USE_ADC__";
        EE_OPT = "__USE_UART__";
    };
    
    APPMODE OSDEFAULTAPPMODE;
    
    /* Initialization Task (indeed activation set to autostart). Configure and start peripheral drivers, 
       Execute interaction with user to get execution parameters, start application tasks */
    TASK TaskInit {
        PRIORITY  = 1;
        STACK     = SHARED;
        SCHEDULE  = FULL;
        AUTOSTART = TRUE;
    };

    /* Execute Kitt effect with board's leds */
    TASK TaskLeds {
        PRIORITY = 2;
        STACK    = SHARED;
        SCHEDULE = FULL;
    };

    /* Execute stadium choir with buzzer :) */ 
    TASK TaskBuzzer {
        PRIORITY = 3;
        STACK    = SHARED;
        SCHEDULE = FULL;
    };

    /* Read control character (e.g. '\e' = restart) and sent actual value read by ADC */
    TASK TaskConsole {
        PRIORITY = 4;
        STACK    = SHARED;
        SCHEDULE = FULL;
    };

    /* Used for implement delay (sleep like) function */
    TASK TaskWaitFinished {
        PRIORITY = 5;
        STACK    = SHARED;
        SCHEDULE = FULL;
    };
    
    /* Voltage control task activated by user request */
    TASK TaskVoltageCtrl {
        PRIORITY = 6;
        STACK    = SHARED;
        SCHEDULE = FULL;
    };
 
    /* General purpose counter for all the needed alarms  */
    COUNTER myCounter {
        MAXALLOWEDVALUE = 65535;
        TICKSPERBASE    = 1;
        MINCYCLE        = 1;
    };
    
    /* Alarm to that cyclically activate Kitt effect */
    ALARM AlarmLeds {
        COUNTER = myCounter;
        ACTION = ACTIVATETASK { TASK = TaskLeds; };
    };
    
    /* Alarm used for wait notification */
    ALARM AlarmWaitFinished {
        COUNTER = myCounter;
        ACTION = ACTIVATETASK { TASK = TaskWaitFinished; };
    };
    
    /* Alarm that activate console management task */
    ALARM AlarmConsole {
        COUNTER = myCounter;
        ACTION = ACTIVATETASK { TASK = TaskConsole; };
    };
    
    /* Alarm that activate task control PWM voltage output */
    ALARM AlarmVoltageCtrl {
        COUNTER = myCounter;
        ACTION = ACTIVATETASK { TASK = TaskVoltageCtrl; };
    };

};

