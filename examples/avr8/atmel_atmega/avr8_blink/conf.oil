/* ###*B*###
 * ERIKA Enterprise - a tiny RTOS for small microcontrollers
 *
 * Copyright (C) 2002-2014  Evidence Srl
 *
 * This file is part of ERIKA Enterprise.
 *
 * ERIKA Enterprise is free software; you can redistribute it
 * and/or modify it under the terms of the GNU General Public License
 * version 2 as published by the Free Software Foundation, 
 * (with a special exception described below).
 *
 * Linking this code statically or dynamically with other modules is
 * making a combined work based on this code.  Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * As a special exception, the copyright holders of this library give you
 * permission to link this code with independent modules to produce an
 * executable, regardless of the license terms of these independent
 * modules, and to copy and distribute the resulting executable under
 * terms of your choice, provided that you also meet, for each linked
 * independent module, the terms and conditions of the license of that
 * module.  An independent module is a module which is not derived from
 * or based on this library.  If you modify this code, you may extend
 * this exception to your version of the code, but you are not
 * obligated to do so.  If you do not wish to do so, delete this
 * exception statement from your version.
 *
 * ERIKA Enterprise is distributed in the hope that it will be
 * useful, but WITHOUT ANY WARRANTY; without even the implied warranty
 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License version 2 for more details.
 *
 * You should have received a copy of the GNU General Public License
 * version 2 along with ERIKA Enterprise; if not, write to the
 * Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
 * Boston, MA 02110-1301 USA.
 * ###*E*### */

CPU mySystem {

	OS myOs {

/*
		STRING EE_OPT[];
		STRING CFLAGS[];
		STRING ASFLAGS[];
		STRING LDFLAGS[];
		STRING LDDEPS[];
		STRING LIBS[];
*/

		EE_OPT = "DEBUG";

		CPU_DATA = AVR8 {
			APP_SRC = "code.c";
			MULTI_STACK = FALSE;

			/* NOT MEANINGFULL WITH AVR8 CORE */
/*
			STACK_BOTTOM = 0x10FF;
			SYS_SIZE = 0x1000; 
			SHARED_MIN_SYS_SIZE = 0x100;
*/

		};

		MCU_DATA = MEGA {
			MODEL = MEGA_128;
			TIMER0 = DIV64;
			TIMER2 = DIV8;
		};

		BOARD_DATA = XBOW_MIB5X0 {
			USELEDS = TRUE;
		};

		USERESSCHEDULER = FALSE;
		KERNEL_TYPE = FP;

		/* NOT MEANINGFULL WITH FP KERNEL */
/*
		STATUS = EXTENDED;
		STARTUPHOOK = FALSE;
		ERRORHOOK = FALSE;
		SHUTDOWNHOOK = FALSE;
		PRETASKHOOK = FALSE;
		POSTTASKHOOK = FALSE;
		USEGETSERVICEID = FALSE;
		USEPARAMETERACCESS = FALSE;
		USERESSCHEDULER = FALSE;
*/
	};

	TASK TaskL1 {
		PRIORITY = 1;
		STACK = SHARED;
		SCHEDULE = FULL;
		/* RESOURCE = MUTEX_sync; */
	};
  
	TASK TaskL2 {
		PRIORITY = 2;
		STACK = SHARED;
		SCHEDULE = FULL;
	};

	TASK TaskL3 {
		PRIORITY = 3;
		STACK = SHARED;
		SCHEDULE = FULL;
	};

	ISR irq_t0_type2 {	/* TODO: Set correct handler name. */
		CATEGORY = 2;
		ENTRY = "TIMER0_COMP";	/* TODO: Set correct ENTRY name. */
		/* PRIORITY = 1; */	/* FIXED HARDWARE PRIORITY */
	};

	ISR irq_t2_type2 {	/* TODO: Set correct handler name. */
		CATEGORY = 2;
		ENTRY = "TIMER2_COMP";	/* TODO: Set correct ENTRY name. */
		/* PRIORITY = 1; */	/* FIXED HARDWARE PRIORITY */
	};


	COUNTER Counter320us;

	COUNTER Counter1ms;

	ALARM AlarmL1 {
		COUNTER = Counter320us;
		ACTION = ACTIVATETASK {
			TASK = TaskL1; 
		};
	};

	ALARM AlarmL2 {
		COUNTER = Counter320us;
		ACTION = ACTIVATETASK {
			TASK = TaskL2;
		};
	};

	ALARM AlarmL3 {
		COUNTER = Counter1ms;
		ACTION = ACTIVATETASK {
			TASK = TaskL3;
		};
	};

};
