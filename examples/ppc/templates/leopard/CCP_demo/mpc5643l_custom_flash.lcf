/* Memory map for Freescale MPC5643L in DPM mode */

MEMORY
{
    /* First 16 KB for boot sector */
	boot:	org = 0x00000000, len = 0x00004000

    /* 512 KB of Flash memory available in single core configuration */
	iflash:	org = 0x00080000, len = 0x00080000

    /* Calibrations flash area */
    calibrations_ram:	org = 0x00040000, len = 0x00020000
    calibrations_flash:	org = 0x00060000, len = 0x00020000

    /*
     * RAM used to test CCP (can be removed if not necessary but
     * the next memory area has to be adjusted accordingly
     */
    ccp_ram_test: org = 0x40000010, len = 0x30  /* 48 bytes to test CCP */

    /* Use only 64 kB of RAM as in DPM mode.
    /* This value can be equal to 128 in case of LSM...
     * keep in mind in case of big application
     */
	isram:	org = 0x40000040, len = 0x0000FF40

    /* Last 128 bytes to host bootloader input data */
    isram_bootloader_data: org = 0x4000FF80, len = 0x00000080
}

/* If you decide to remove the section ccp_ram_test, hence isram_base = ADDR(isram); */
isram_base = ADDR(ccp_ram_test);
isram_len = SIZEOF(isram);

/* ###*B*###
 * ERIKA Enterprise - a tiny RTOS for small microcontrollers
 *
 * Copyright (C) 2002-2011  Evidence Srl
 *
 * This file is part of ERIKA Enterprise.
 *
 * ERIKA Enterprise is free software; you can redistribute it
 * and/or modify it under the terms of the GNU General Public License
 * version 2 as published by the Free Software Foundation,
 * (with a special exception described below).
 *
 * Linking this code statically or dynamically with other modules is
 * making a combined work based on this code.  Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * As a special exception, the copyright holders of this library give you
 * permission to link this code with independent modules to produce an
 * executable, regardless of the license terms of these independent
 * modules, and to copy and distribute the resulting executable under
 * terms of your choice, provided that you also meet, for each linked
 * independent module, the terms and conditions of the license of that
 * module.  An independent module is a module which is not derived from
 * or based on this library.  If you modify this code, you may extend
 * this exception to your version of the code, but you are not
 * obligated to do so.  If you do not wish to do so, delete this
 * exception statement from your version.
 *
 * ERIKA Enterprise is distributed in the hope that it will be
 * useful, but WITHOUT ANY WARRANTY; without even the implied warranty
 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License version 2 for more details.
 *
 * You should have received a copy of the GNU General Public License
 * version 2 along with ERIKA Enterprise; if not, write to the
 * Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
 * Boston, MA 02110-1301 USA.
 * ###*E*### */
/*
 * Linker script for CodeWarrior compiler, for executables running from flash.
 * Author: Francesco Esposito
 */

SECTIONS
{
	GROUP : {
		.boot_data LOAD(ADDR(boot)): { KEEP(*(.boot_data)) }
		.boot LOAD(ADDR(.boot)): { }
	} > boot

	GROUP : {
		/*
		 * The following sections handle ee_start symbol placing (in both modes: VLE and BookE)
		 */
		ee_abs_saddr = .;
		.abs_vle.00080080 (VLECODE) LOAD(ee_abs_saddr): {}
		.abs.00080080 LOAD(ee_abs_saddr): {}
		ee_abs_eaddr = .;

        /* 
         * init section is located immediately after boot address
         * (within 4Kbytes required by MMU constraints at startup)
         */
        ee_init_saddr = .;
        .init LOAD(ee_abs_eaddr): {}
        .init_vle (VLECODE) LOAD(ee_abs_eaddr): {
            *(.init)
            *(.init_vle)
        }
        ee_init_eaddr = .;

		//.text_vle (VLECODE) LOAD(ADDR(iflash)+SIZEOF(APPL_descriptor_section)+SIZEOF(.abs_vle.00080080)): {
		.text_vle (VLECODE) LOAD(ee_init_eaddr): {
			*(.text)
			*(.text_vle)
			/**(.init)*/
			*(.fini)
			_etext_vle = . ;
		}
		.text LOAD(_etext_vle): {
			*(.text)
			*(.text_vle)
			/**(.init)*/
			*(.fini)
			*(.ctors)
			*(.dtors)
			*(extab)
			*(extabindex)
			*(.rdata)
			*(.rodata)
			_etext = . ;
		}

		.sdata2 LOAD(_etext): {
			*(.sdata2)
			*(.sbss2)
		 }

		. = ALIGN(16);
		ee_load_ram = . ;
	} > iflash

	GROUP : {
		ee_sdata = . ;
		.data LOAD(ee_load_ram): { }

		.sram_text LOAD(ee_load_ram + ADDR(.sram_text) - ADDR(.data)): { }

		.sdata LOAD(ee_load_ram + ADDR(.sdata) - ADDR(.data)): { }

		ee_sbss = . ;
		.sbss : { }
		.bss : { }
		ee_ebss = . ;

		ee_sstack = . ;
		.stack LOAD(ADDR(.stack)): {
			*(.stack)
			*(.ustack)
		}
		ee_estack = . ;
	} > isram

    .abs.40000010 LOAD(0x40000010) : {} > ccp_ram_test
}

