/* ###*B*###
 * ERIKA Enterprise - a tiny RTOS for small microcontrollers
 *
 * Copyright (C) 2002-2008  Evidence Srl
 *
 * This file is part of ERIKA Enterprise.
 *
 * ERIKA Enterprise is free software; you can redistribute it
 * and/or modify it under the terms of the GNU General Public License
 * version 2 as published by the Free Software Foundation, 
 * (with a special exception described below).
 *
 * Linking this code statically or dynamically with other modules is
 * making a combined work based on this code.  Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * As a special exception, the copyright holders of this library give you
 * permission to link this code with independent modules to produce an
 * executable, regardless of the license terms of these independent
 * modules, and to copy and distribute the resulting executable under
 * terms of your choice, provided that you also meet, for each linked
 * independent module, the terms and conditions of the license of that
 * module.  An independent module is a module which is not derived from
 * or based on this library.  If you modify this code, you may extend
 * this exception to your version of the code, but you are not
 * obligated to do so.  If you do not wish to do so, delete this
 * exception statement from your version.
 *
 * ERIKA Enterprise is distributed in the hope that it will be
 * useful, but WITHOUT ANY WARRANTY; without even the implied warranty
 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License version 2 for more details.
 *
 * You should have received a copy of the GNU General Public License
 * version 2 along with ERIKA Enterprise; if not, write to the
 * Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
 * Boston, MA 02110-1301 USA.
 * ###*E*### */

 
CPU mySystem { 
	OS myOs {
		EE_OPT = "DEBUG"; 
		EE_OPT = "VERBOSE"; 
		STATUS = EXTENDED; 
		USERESSCHEDULER = FALSE; 
		CPU_DATA = TRICORE1 { 
			APP_SRC = "code.c"; 
			MODEL = "tc1796"; 
		}; 				
		KERNEL_TYPE = FP;
	}; 
	
	TASK Task0 { 
		PRIORITY = 2; 
		ACTIVATION = 1; 
		STACK = SHARED; 
		SCHEDULE = FULL; 
	}; 
	TASK Task1 { 
		PRIORITY = 3; 
		ACTIVATION = 1; 
		STACK = SHARED; 
		SCHEDULE = FULL; 
	}; 
    
	ISR Timer_isr2 {
		CATEGORY = 2;
		LEVEL = "4";
		HANDLER = "isr2";	// IRQ handler
	};
	ISR irq5_isr1 {
		CATEGORY = 1;
		LEVEL = "5";
		HANDLER = "isr1";	// IRQ handler
	};
	
	ISR trap_segfault {
		CATEGORY = 3; // category 3 is used to describe Trap
		LEVEL = "1";
		HANDLER = "segfault";	// Trap handler
	};
	ISR trap_syscall {
		CATEGORY = 3; // category 3 is used to describe Trap
		LEVEL = "6";
		HANDLER = "syscall";	// Trap handler
	};
};

