This directory contains the examples used during the porting of Erika to the
Lattice Mico32.  As the Mico32 is a softcore processor embedded in an Fpga, you
must also configure the hardware; therefore, included is everything that is
needed to program the hardware and the software.

The projects have been generated and tested with the LatticeMico32 System
version 8.0 for both Linux and Windows.

There are four directories:

* `hw_projects' contains the hardware projects and the script to run the program
  with the Aldec ActiveHDL simulator.

  - `hwproject-svn-ignore'

  - `simulation_mico32' is a project to run Erika on a behavioral simulation of
    the Mico32 Verilog definition.  The platform used is `onchipramtimer'.
    There are a Verilog test bench, `onchipramtimer_tb.v', and an ActiveHDL
    script, `run_sim.do', that compiles the test bench and runs the simulation.
    The simulation needs the memory initalization files
    `meminit_Instruction_IM.mem' and `meminit_Data_IM.mem', generated by
    `simul_makefile' (see below).  Alternatively, they can be created from the
    Lattice Ide (Menu `Tools' -> `Software Deployment...').  It imports the
    `global.do' script generated by `wavesymbol.py' (see below).

* `platforms' contains the configurations of the Fpga as MSB files.  The files
  can be opened in the Lattice Mico32 software environment to generate the
  Verilog and the driver source files.

  - `onchipramtimer' is the platform used to run Erika with simulator.  It's
    very minimal, to make the simulation faster.  It contains two memories
    (instruction and data) embedded in the processor, and a timer to generate
    interrupts.
  
* `scripts' contains scripts used in the development and test phases.

  - `wavesymbol.py' is a Python script to extract information about global
    variables from an Elf object and write the commands to show the variables in
    the wave viewer of the ActiveHDL simulator.

* `projects' contains the software projects and the test programs.

  - `onchipramtimer_lib' is a Lattice Mico32 library project for the
    onchipramtimer platform and used in the projects running on the simulator.
  
  - `EEtest0' is an empty test.  It has been used to test the compiler toolchain
    and write the makefiles.  It runs, but it does nothing, as the main() is
    empty.

  - `mono_EEtest01' is a test for the monostack Erika using the FP kernel on the
    onchipramtimer platform.  It tests task activation.
  
  - `mono_EEtest02' is a test for the monostack Erika using the FP kernel on the
    onchipramtimer platform.  It tests interrupts and task activation from an
    interrupt handler.

  - `multi_EEtest00' is a project with empty functions to test the compilation
    and the size of the multistack version of Erika.
  
  - `multi_EEtest01' is a test for the multistack Erika using the FP kernel on
    the onchipramtimer platform.  It tests the activation of tasks on different
    stacks.
  
  - `multi_EEtest02' is a test for the multistack Erika using the FP kernel on
    the onchipramtimer platform.  It tests the activation of tasks from an
    interrupt handler.
  
  - `multi_EEtest03' is a test for the multistack Erika using the FP kernel on
    the onchipramtimer platform with a private stack for interrupt handlers.
  
  - `project-prop-svn-ignore' value for the `svn:ignore' property of project
    directories to avoid to inadvertently commit the files generated by the
    build process.

  Each project contains some standard files:
  
    + `conf.oil' is the OIL configuration files

    + `fake_druid' is a directory containing the files generated from the OIL
      configuration file.  Normally RTDruid generates those files, but a version
      for the Mico32 was not available at the time of writing these examples.

    + `fake_druid/crt0ram.S' contains the boot loader and the exception vector.

    + `fake_druid/makefile' is the main makefile.

    + `fake_druid/lattice.mk' is a makefile containing some options for the
      Lattice environment.

    + `fake_druid/platform.mk' is a makefile containing the information about
      the platform in use.

    + `main.c' is the main C source file.

    + `makefile' is the makefile that drives the building.  It runs RTDruid and
      then it launches the main makefile.  As RTDruid was not always avilable
      during the development, it can also emulate RTDruid by copying the files
      in `fake_druid' to `output'; this behavior is activated when the
      environment variable `DONT_RUN_RTDRUID' is set to `1'.

    + `simul_makefile' is the makefile to use when running the simulator.
      Besides building the executable, it creates the images for the Ram
      initialization and the script to display the global variables in the
      simulator.  It launches `wavesymbol.py' (see above), so it needs a valid
      installation of Python (versions 2.4 and 2.5 should work).
 
